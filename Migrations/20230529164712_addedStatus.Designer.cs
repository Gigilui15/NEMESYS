// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NEMESYS.Data;

#nullable disable

namespace NEMESYS.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230529164712_addedStatus")]
    partial class addedStatus
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b582190c-f9af-11ed-be56-0242ac120002",
                            ConcurrencyStamp = "1",
                            Name = "Reporter",
                            NormalizedName = "REP"
                        },
                        new
                        {
                            Id = "2e33b0ea-f9b0-11ed-be56-0242ac120002",
                            ConcurrencyStamp = "1",
                            Name = "Investigator",
                            NormalizedName = "INV"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "19e2d6a8-f9aa-11ed-be56-0242ac120002",
                            RoleId = "2e33b0ea-f9b0-11ed-be56-0242ac120002"
                        },
                        new
                        {
                            UserId = "1e0a2010-f9aa-11ed-be56-0242ac120002",
                            RoleId = "2e33b0ea-f9b0-11ed-be56-0242ac120002"
                        },
                        new
                        {
                            UserId = "2f2e610c-f9ab-11ed-be56-0242ac120002",
                            RoleId = "2e33b0ea-f9b0-11ed-be56-0242ac120002"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NEMESYS.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ReporterAlias")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "19e2d6a8-f9aa-11ed-be56-0242ac120002",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "46d8c3de-ab03-48a5-ad0c-f42b8774e15c",
                            Email = "investigator@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MAIL.COM",
                            NormalizedUserName = "INVESTIGATOR@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAkt8DnC1TAYH+RiCQ4qGTIbMnrInL7Ei5Z7Yhqc2XJ20ByaE5L/bUuwBEuqDZzxyw==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            ReporterAlias = "Investigator A",
                            SecurityStamp = "d6f56b5a-770a-4a0d-8f01-909200928c97",
                            TwoFactorEnabled = false,
                            UserName = "investigator@mail.com"
                        },
                        new
                        {
                            Id = "1e0a2010-f9aa-11ed-be56-0242ac120002",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "85d10382-8377-4c43-b3e4-f66dac5f0e9e",
                            Email = "investigator@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "INVESTIGATOR@GMAIL.COM",
                            NormalizedUserName = "INVESTIGATOR@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEM8vPBZSaETaNvoirJbrTYOZm62rsbFBP18/uEL6TApqT1qZZbp8LZU8CY16UlS0KQ==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            ReporterAlias = "Investigator B",
                            SecurityStamp = "a5f14ed2-1825-404a-a318-2b4e977f9891",
                            TwoFactorEnabled = false,
                            UserName = "investigator@gmail.com"
                        },
                        new
                        {
                            Id = "2f2e610c-f9ab-11ed-be56-0242ac120002",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "54bb7dfd-ca56-43e0-8672-c3cd72a3df9a",
                            Email = "tester@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TESTER@GMAIL.COM",
                            NormalizedUserName = "TESTER@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEK31DhfZiruNEI0YZYbq9OVIuQuEag75GvJ2BfGttEEkzFj9tqFrO2j3iOicjkq2og==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            ReporterAlias = "Tester",
                            SecurityStamp = "6f7839a2-056f-440d-ad38-1c5ae9d0c020",
                            TwoFactorEnabled = false,
                            UserName = "tester@gmail.com"
                        });
                });

            modelBuilder.Entity("NEMESYS.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Accident"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Danger"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Health"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Assault"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Equipment"
                        },
                        new
                        {
                            Id = 6,
                            Name = "No Category"
                        });
                });

            modelBuilder.Entity("NEMESYS.Models.Investigation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Investigations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "LESA on the Way...",
                            CreatedDate = new DateTime(2023, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedDate = new DateTime(2023, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "19e2d6a8-f9aa-11ed-be56-0242ac120002"
                        },
                        new
                        {
                            Id = 2,
                            Content = "Spotted all of them and called pest removal...",
                            CreatedDate = new DateTime(2023, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedDate = new DateTime(2023, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "19e2d6a8-f9aa-11ed-be56-0242ac120002"
                        },
                        new
                        {
                            Id = 3,
                            Content = "Should have been cleaned last week however...",
                            CreatedDate = new DateTime(2023, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedDate = new DateTime(2023, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "2f2e610c-f9ab-11ed-be56-0242ac120002"
                        });
                });

            modelBuilder.Entity("NEMESYS.Models.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InvestigationId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("InvestigationId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Reports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Content = "Today at around 2.15pm a bumper-to-bumper incident caused a traffic jam...",
                            CreatedDate = new DateTime(2023, 5, 29, 18, 47, 12, 250, DateTimeKind.Local).AddTicks(7818),
                            ImageUrl = "/images/uom.jpg",
                            InvestigationId = 1,
                            StatusId = 1,
                            Title = "Bumper-to-Bumper in RingRoad",
                            UpdatedDate = new DateTime(2023, 5, 29, 16, 47, 12, 250, DateTimeKind.Utc).AddTicks(7852),
                            UserId = "2f2e610c-f9ab-11ed-be56-0242ac120002"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            Content = "Two hornet nests have been spotted under...",
                            CreatedDate = new DateTime(2023, 5, 29, 18, 47, 12, 250, DateTimeKind.Local).AddTicks(7854),
                            ImageUrl = "/images/quad.jpg",
                            InvestigationId = 2,
                            StatusId = 2,
                            Title = "Hornet Nests Around Quad!",
                            UpdatedDate = new DateTime(2023, 5, 28, 16, 47, 12, 250, DateTimeKind.Utc).AddTicks(7856),
                            UserId = "19e2d6a8-f9aa-11ed-be56-0242ac120002"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            Content = "Numerous students have been noticing the quality of air in...",
                            CreatedDate = new DateTime(2023, 5, 29, 18, 47, 12, 250, DateTimeKind.Local).AddTicks(7859),
                            ImageUrl = "/images/ICT.jpg",
                            InvestigationId = 3,
                            StatusId = 3,
                            Title = "AC Filters in the Faculty of ICT",
                            UpdatedDate = new DateTime(2023, 5, 27, 16, 47, 12, 250, DateTimeKind.Utc).AddTicks(7861),
                            UserId = "1e0a2010-f9aa-11ed-be56-0242ac120002"
                        });
                });

            modelBuilder.Entity("NEMESYS.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Open"
                        },
                        new
                        {
                            Id = 2,
                            Title = "In Progress"
                        },
                        new
                        {
                            Id = 3,
                            Title = "Closed"
                        },
                        new
                        {
                            Id = 4,
                            Title = "Not Solved"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NEMESYS.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NEMESYS.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NEMESYS.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NEMESYS.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NEMESYS.Models.Investigation", b =>
                {
                    b.HasOne("NEMESYS.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NEMESYS.Models.Report", b =>
                {
                    b.HasOne("NEMESYS.Models.Category", "Category")
                        .WithMany("Reports")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NEMESYS.Models.Investigation", "Investigation")
                        .WithMany()
                        .HasForeignKey("InvestigationId");

                    b.HasOne("NEMESYS.Models.Status", null)
                        .WithMany("Reports")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NEMESYS.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Investigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NEMESYS.Models.Category", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("NEMESYS.Models.Status", b =>
                {
                    b.Navigation("Reports");
                });
#pragma warning restore 612, 618
        }
    }
}
